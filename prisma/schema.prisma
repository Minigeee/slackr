// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Workspace {
    id          String            @id @default(cuid())
    name        String
    slug        String            @unique
    imageUrl    String?
    createdAt   DateTime          @default(now())
    members     WorkspaceMember[]
    channels    Channel[]
}

model WorkspaceMember {
    id          String    @id @default(cuid())
    userId      String    // This will store Clerk user ID
    workspaceId String
    role        String    @default("member") // can be owner, admin, member
    status      String    @default("online") // can be invisible, away, busy, online
    statusMessage String?  // Optional custom status message
    lastSeen    DateTime  @default(now())
    joinedAt    DateTime  @default(now())
    workspace   Workspace @relation(fields: [workspaceId], references: [id])

    @@unique([userId, workspaceId])
}

model Channel {
    id          String          @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime        @default(now())
    workspaceId String
    isPrivate   Boolean         @default(false)
    type        String?         @default("channel") // can be channel or dm
    workspace   Workspace       @relation(fields: [workspaceId], references: [id])
    members     ChannelMember[]
    messages    Message[]

    @@unique([name, workspaceId])
}

model ChannelMember {
    id        String   @id @default(cuid())
    userId    String   // This will store Clerk user ID
    channelId String
    role      String   @default("member") // can be owner, member
    joinedAt  DateTime @default(now())
    channel   Channel  @relation(fields: [channelId], references: [id])

    @@unique([userId, channelId])
}

model Message {
    id          String    @id @default(cuid())
    content     String    @db.Text
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    userId      String    // This will store Clerk user ID
    channelId   String
    parentId    String?   // For thread replies
    threadId    String?   // ID of the original message that started the thread
    thread      Message?  @relation("ThreadMessages", fields: [threadId], references: [id])
    replies     Message[] @relation("ThreadMessages")
    channel     Channel   @relation(fields: [channelId], references: [id])
    attachments Attachment[]
    reactions   MessageReaction[]

    @@index([content])
    @@index([channelId, createdAt])
}

model MessageReaction {
    id        String   @id @default(cuid())
    emoji     String   // The emoji character or shortcode
    userId    String   // This will store Clerk user ID
    messageId String
    createdAt DateTime @default(now())
    message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

    @@unique([userId, messageId, emoji])
    @@index([messageId])
}

model Attachment {
    id          String   @id @default(cuid())
    url         String   // S3 bucket URL
    key         String   // S3 object key
    filename    String   // Original file name
    mimeType    String   // File MIME type
    size        Int      // File size in bytes
    width       Int?     // Image width if applicable
    height      Int?     // Image height if applicable
    createdAt   DateTime @default(now())
    messageId   String
    message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

    @@index([messageId])
}
